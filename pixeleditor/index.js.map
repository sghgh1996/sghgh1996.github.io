{"version":3,"sources":["modules/rgb-slider/index.js","modules/painting-grid/index.js","index.js"],"names":["rgbSlider","document","slider","querySelector","insertAdjacentHTML","sliderArrowContainer","sliderArrowRight","sliderArrowLeft","sliderRange","fixSlider","sliderValue","value","style","top","sliderColor","HSLToHex","borderRightColor","borderLeftColor","h","s","l","c","Math","abs","x","m","r","g","b","round","toString","length","module","exports","paintingGrid","paintingCanvas","paintingCanvasCtx","getContext","gridSize","paintingColor","addEventListener","e","paintingCanvasMouseDown","paintCellNumbers","paintCellSize","parseInt","mousePosition","getMousePosition","canvas","rect","getBoundingClientRect","clientX","left","y","clientY","rowIndex","ceil","columnIndex","fillStyle","fillRect","updatePaintingGridSize","size","updatePaintingBoard","clearRect","width","height","beginPath","strokeStyle","i","j","stroke","updatePaintingGridColor","color","downloadPainting","downloadLink","createElement","href","toDataURL","download","body","appendChild","click","removeChild","selectedColorBox","sizeInputs","querySelectorAll","require","handleSliderChange","backgroundColor","innerHTML","oninput","target"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["let rgbSlider = function (document) {\n  const slider = document.querySelector('#rgb-slider');\n\n  slider.insertAdjacentHTML('beforeend','<input type=\"range\" min=\"0\" max=\"360\" value=\"180\" class=\"rgb-range-slider\" />')\n  slider.insertAdjacentHTML('beforeend','<div class=\"rgb-slider-scale\"></div>');\n  slider.insertAdjacentHTML('beforeend',\n    `<div class=\"rgb-slider-arrow-container flex flex-justify-space-between\">\n      <div class=\"rgb-slider-arrow-left\"></div>\n      <div class=\"rgb-slider-arrow-right\"></div>\n    </div>`\n  );\n\n  const sliderArrowContainer = document.querySelector('.rgb-slider-arrow-container');\n  const sliderArrowRight = document.querySelector('.rgb-slider-arrow-right');\n  const sliderArrowLeft = document.querySelector('.rgb-slider-arrow-left');\n  const sliderRange = document.querySelector('.rgb-range-slider')\n\n  function fixSlider () {\n    const sliderValue = sliderRange.value;\n    sliderArrowContainer.style.top = `${(1 - sliderValue/360) * 400 - 8}px`;\n    \n    const sliderColor = HSLToHex(sliderValue, 100, 50);\n  \n    sliderArrowRight.style.borderRightColor = sliderColor;\n    sliderArrowLeft.style.borderLeftColor = sliderColor;\n\n    return sliderColor;\n  }\n\n  return {\n    sliderRange,\n    fixSlider\n  };\n}\n\nfunction HSLToHex(h, s, l) {\n  s /= 100;\n  l /= 100;\n\n  let c = (1 - Math.abs(2 * l - 1)) * s,\n      x = c * (1 - Math.abs((h / 60) % 2 - 1)),\n      m = l - c/2,\n      r = 0,\n      g = 0,\n      b = 0;\n\n  if (0 <= h && h < 60) {\n    r = c; g = x; b = 0;\n  } else if (60 <= h && h < 120) {\n    r = x; g = c; b = 0;\n  } else if (120 <= h && h < 180) {\n    r = 0; g = c; b = x;\n  } else if (180 <= h && h < 240) {\n    r = 0; g = x; b = c;\n  } else if (240 <= h && h < 300) {\n    r = x; g = 0; b = c;\n  } else if (300 <= h && h <= 360) {\n    r = c; g = 0; b = x;\n  }\n  // Having obtained RGB, convert channels to hex\n  r = Math.round((r + m) * 255).toString(16);\n  g = Math.round((g + m) * 255).toString(16);\n  b = Math.round((b + m) * 255).toString(16);\n\n  // Prepend 0s, if necessary\n  if (r.length == 1)\n    r = \"0\" + r;\n  if (g.length == 1)\n    g = \"0\" + g;\n  if (b.length == 1)\n    b = \"0\" + b;\n\n  return \"#\" + r + g + b;\n}\n\n\nmodule.exports = rgbSlider;","let paintingGrid = function(document) {\n  const paintingCanvas = document.querySelector('#painting-canvas');\n  const paintingCanvasCtx = paintingCanvas.getContext('2d');\n  var gridSize = 16;\n  var paintingColor = '#000';\n\n  paintingCanvas.addEventListener('mousedown', function(e) {\n    paintingCanvasMouseDown(e);\n  });\n\n  function getMousePosition(canvas, e) {\n    const rect = canvas.getBoundingClientRect();\n    return {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n  }\n  \n  function paintingCanvasMouseDown(e) {\n    const paintCellNumbers = parseInt(gridSize);\n    const paintCellSize = 400 / paintCellNumbers;\n  \n    const mousePosition = getMousePosition(paintingCanvas, e);\n    const rowIndex = Math.ceil(mousePosition.x / paintCellSize);\n    const columnIndex = Math.ceil(mousePosition.y / paintCellSize);\n    \n    paintingCanvasCtx.fillStyle = paintingColor;\n    paintingCanvasCtx.fillRect((rowIndex - 1) * paintCellSize, (columnIndex - 1) * paintCellSize, paintCellSize, paintCellSize);\n  }\n\n  function updatePaintingBoard () {\n    paintingCanvasCtx.clearRect(0, 0, paintingCanvas.width, paintingCanvas.height);\n  \n    paintingCanvasCtx.beginPath();\n    paintingCanvasCtx.strokeStyle = '#d7d7d7';\n    const paintCellNumbers = parseInt(gridSize);\n    const paintCellSize = 400 / paintCellNumbers;\n  \n    for (let i = 0; i < paintCellNumbers; i++) {\n      \n      for (let j = 0; j < paintCellNumbers; j++) {\n        paintingCanvasCtx.rect(i * paintCellSize, j * paintCellSize, paintCellSize, paintCellSize);\n      }\n    }\n    paintingCanvasCtx.stroke();\n  }\n\n  function updatePaintingGridSize (size) {\n    gridSize = size;\n    updatePaintingBoard();\n  }\n\n  function updatePaintingGridColor (color) {\n    paintingColor = color;    \n  }\n\n  function downloadPainting () {\n    let downloadLink = document.createElement('a');\n    downloadLink.href = paintingCanvas.toDataURL();\n    downloadLink.download = 'painting.png';\n\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n  }\n\n  return {\n    updatePaintingGridSize,\n    updatePaintingGridColor,\n    downloadPainting\n  };\n}\n\nmodule.exports = paintingGrid;","const selectedColorBox = document.querySelector('.selected-color-box');\nconst sizeInputs = document.querySelectorAll('.input-box .input input');\nvar sliderColor = '#000';\n\nconst rgbSlider = require('./modules/rgb-slider');\nconst paintingGrid = require('./modules/painting-grid');\n\nconst {\n  updatePaintingGridSize,\n  updatePaintingGridColor,\n  downloadPainting\n} = paintingGrid(document);\nconst { sliderRange, fixSlider } = rgbSlider(document);\n\nhandleSliderChange();\nsliderRange.oninput = function() {\n  handleSliderChange();\n}\nfunction handleSliderChange() {\n  sliderColor = fixSlider();\n  selectedColorBox.style.backgroundColor = sliderColor;\n  selectedColorBox.innerHTML = sliderColor;\n\n  updatePaintingGridColor(sliderColor);\n}\n\nupdatePaintingGridSize(sizeInputs[0].value);\n\nsizeInputs[0].oninput = function(e) {\n  sizeInputs[1].value = e.target.value;\n  updatePaintingGridSize(sizeInputs[0].value);\n}\n\nsizeInputs[1].oninput = function(e) {\n  sizeInputs[0].value = e.target.value;\n  updatePaintingGridSize(sizeInputs[0].value);\n}\n\ndocument.querySelector('.button-download').addEventListener('click', function() {\n  downloadPainting();\n}, false);"]}